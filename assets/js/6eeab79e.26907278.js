"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3525],{4254:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"how-to-guides/performance","title":"How to Optimize Performance","description":"Scale ATT&CK Data Model for large datasets and production workloads","source":"@site/docs/how-to-guides/performance.mdx","sourceDirName":"how-to-guides","slug":"/how-to-guides/performance","permalink":"/attack-data-model/docs/how-to-guides/performance","draft":false,"unlisted":false,"editUrl":"https://github.com/mitre-attack/attack-data-model/tree/main/docusaurus/docs/how-to-guides/performance.mdx","tags":[],"version":"current","lastUpdatedBy":"Sean Sica","lastUpdatedAt":1757710335000,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"How to Handle Parsing Errors Gracefully","permalink":"/attack-data-model/docs/how-to-guides/error-handling"},"next":{"title":"Reference","permalink":"/attack-data-model/docs/reference/"}}');var i=r(4848),a=r(8453),s=r(1367);const o={},c="How to Optimize Performance",l={},d=[{value:"Problem Scenarios",id:"problem-scenarios",level:2},{value:"Optimize Data Loading",id:"optimize-data-loading",level:2},{value:"Use Relaxed Parsing Mode",id:"use-relaxed-parsing-mode",level:3},{value:"Parallelize Multiple Domain Loading",id:"parallelize-multiple-domain-loading",level:3},{value:"Memory Optimization",id:"memory-optimization",level:2},{value:"Selective Data Loading",id:"selective-data-loading",level:3},{value:"Implement Data Streaming",id:"implement-data-streaming",level:3},{value:"Optimize Relationship Navigation",id:"optimize-relationship-navigation",level:2},{value:"Cache Relationship Results",id:"cache-relationship-results",level:3},{value:"Pre-compute Common Relationships",id:"pre-compute-common-relationships",level:3},{value:"Concurrent Access Patterns",id:"concurrent-access-patterns",level:2},{value:"Thread-Safe Data Access",id:"thread-safe-data-access",level:3},{value:"Production Optimization",id:"production-optimization",level:2},{value:"Connection Pooling for Multiple Requests",id:"connection-pooling-for-multiple-requests",level:3},{value:"Lazy Loading with Proxies",id:"lazy-loading-with-proxies",level:3},{value:"Monitoring Performance",id:"monitoring-performance",level:2},{value:"Add Performance Metrics",id:"add-performance-metrics",level:3},{value:"Configuration for Scale",id:"configuration-for-scale",level:2},{value:"Production Environment Variables",id:"production-environment-variables",level:3},{value:"Key Performance Tips",id:"key-performance-tips",level:2},{value:"Related Guides",id:"related-guides",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-to-optimize-performance",children:"How to Optimize Performance"})}),"\n",(0,i.jsx)(s.A,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scale ATT&CK Data Model for large datasets and production workloads"})}),"\n",(0,i.jsx)(n.p,{children:"This guide shows you how to optimize performance when working with large ATT&CK datasets, multiple domains, or production applications with high throughput requirements."}),"\n",(0,i.jsx)(n.h2,{id:"problem-scenarios",children:"Problem Scenarios"}),"\n",(0,i.jsx)(n.p,{children:"Use this guide when you experience:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slow data loading times with large ATT&CK datasets"}),"\n",(0,i.jsx)(n.li,{children:"High memory usage when working with multiple domains"}),"\n",(0,i.jsx)(n.li,{children:"Performance bottlenecks in relationship navigation"}),"\n",(0,i.jsx)(n.li,{children:"Need to optimize for production throughput"}),"\n",(0,i.jsx)(n.li,{children:"Requirements for concurrent data access"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"optimize-data-loading",children:"Optimize Data Loading"}),"\n",(0,i.jsx)(n.h3,{id:"use-relaxed-parsing-mode",children:"Use Relaxed Parsing Mode"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Faster loading - continues on validation errors\r\nconst fastDataSource = new DataSource({\r\n    source: 'attack',\r\n    domain: 'enterprise-attack',\r\n    version: '15.1',\r\n    parsingMode: 'relaxed' // Skip strict validation for speed\r\n});\r\n\r\n// vs slower but more thorough validation\r\nconst strictDataSource = new DataSource({\r\n    source: 'attack',\r\n    domain: 'enterprise-attack',\r\n    version: '15.1',\r\n    parsingMode: 'strict' // Full validation - slower but safer\r\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parallelize-multiple-domain-loading",children:"Parallelize Multiple Domain Loading"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async function loadDomainsInParallel() {\r\n    const domains = [\r\n        { name: 'enterprise-attack', label: 'Enterprise' },\r\n        { name: 'mobile-attack', label: 'Mobile' },\r\n        { name: 'ics-attack', label: 'ICS' }\r\n    ];\r\n\r\n    // Load all domains simultaneously instead of sequentially\r\n    const loadPromises = domains.map(async (domain) => {\r\n        const dataSource = new DataSource({\r\n            source: 'attack',\r\n            domain: domain.name,\r\n            version: '15.1',\r\n            parsingMode: 'relaxed'\r\n        });\r\n\r\n        const uuid = await registerDataSource(dataSource);\r\n        return {\r\n            domain: domain.name,\r\n            label: domain.label,\r\n            model: loadDataModel(uuid)\r\n        };\r\n    });\r\n\r\n    // Wait for all to complete\r\n    const results = await Promise.all(loadPromises);\r\n\r\n    return results.reduce((acc, result) => {\r\n        acc[result.domain] = result.model;\r\n        return acc;\r\n    }, {} as { [key: string]: any });\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"memory-optimization",children:"Memory Optimization"}),"\n",(0,i.jsx)(n.h3,{id:"selective-data-loading",children:"Selective Data Loading"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class SelectiveAttackDataModel {\r\n    private fullModel: any;\r\n\r\n    constructor(model: any) {\r\n        this.fullModel = model;\r\n    }\r\n\r\n    // Only load techniques when needed\r\n    getTechniques(): any[] {\r\n        return this.fullModel.techniques;\r\n    }\r\n\r\n    // Get lightweight technique summaries\r\n    getTechniqueSummaries(): Array<{id: string, name: string, attackId: string}> {\r\n        return this.fullModel.techniques.map((t: any) => ({\r\n            id: t.id,\r\n            name: t.name,\r\n            attackId: t.external_references[0].external_id\r\n        }));\r\n    }\r\n\r\n    // Get specific technique by ID without loading all\r\n    getTechniqueById(id: string): any {\r\n        return this.fullModel.techniques.find((t: any) => t.id === id);\r\n    }\r\n\r\n    // Release memory for unused data\r\n    clearUnusedData() {\r\n        // Remove large description fields if not needed\r\n        this.fullModel.techniques.forEach((t: any) => {\r\n            if (t.description && t.description.length > 1000) {\r\n                t.description = t.description.substring(0, 200) + '...';\r\n            }\r\n        });\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"implement-data-streaming",children:"Implement Data Streaming"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class StreamingAttackProcessor {\r\n    private batchSize = 50;\r\n\r\n    async processTechniquesInBatches(\r\n        model: any,\r\n        processor: (batch: any[]) => Promise<void>\r\n    ) {\r\n        const techniques = model.techniques;\r\n\r\n        for (let i = 0; i < techniques.length; i += this.batchSize) {\r\n            const batch = techniques.slice(i, i + this.batchSize);\r\n\r\n            // Process batch\r\n            await processor(batch);\r\n\r\n            // Allow event loop to breathe\r\n            await new Promise(resolve => setImmediate(resolve));\r\n\r\n            console.log(`Processed ${Math.min(i + this.batchSize, techniques.length)}/${techniques.length} techniques`);\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\nconst processor = new StreamingAttackProcessor();\r\nawait processor.processTechniquesInBatches(attackModel, async (batch) => {\r\n    // Process each batch of techniques\r\n    batch.forEach(technique => {\r\n        // Your processing logic here\r\n        console.log(`Processing: ${technique.name}`);\r\n    });\r\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"optimize-relationship-navigation",children:"Optimize Relationship Navigation"}),"\n",(0,i.jsx)(n.h3,{id:"cache-relationship-results",children:"Cache Relationship Results"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class CachedRelationshipNavigator {\r\n    private relationshipCache = new Map<string, any[]>();\r\n\r\n    getTactics(technique: any): any[] {\r\n        const cacheKey = `tactics_${technique.id}`;\r\n\r\n        if (this.relationshipCache.has(cacheKey)) {\r\n            return this.relationshipCache.get(cacheKey)!;\r\n        }\r\n\r\n        const tactics = technique.getTactics();\r\n        this.relationshipCache.set(cacheKey, tactics);\r\n\r\n        return tactics;\r\n    }\r\n\r\n    getMitigations(technique: any): any[] {\r\n        const cacheKey = `mitigations_${technique.id}`;\r\n\r\n        if (this.relationshipCache.has(cacheKey)) {\r\n            return this.relationshipCache.get(cacheKey)!;\r\n        }\r\n\r\n        const mitigations = technique.getMitigations();\r\n        this.relationshipCache.set(cacheKey, mitigations);\r\n\r\n        return mitigations;\r\n    }\r\n\r\n    clearCache() {\r\n        this.relationshipCache.clear();\r\n    }\r\n\r\n    getCacheStats() {\r\n        return {\r\n            size: this.relationshipCache.size,\r\n            memory: JSON.stringify([...this.relationshipCache.entries()]).length\r\n        };\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pre-compute-common-relationships",children:"Pre-compute Common Relationships"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class RelationshipIndexer {\r\n    private techniqueToTactics = new Map<string, string[]>();\r\n    private tacticToTechniques = new Map<string, string[]>();\r\n\r\n    buildIndexes(model: any) {\r\n        console.log('\ud83d\udd04 Building relationship indexes...');\r\n        const startTime = Date.now();\r\n\r\n        // Index technique \u2192 tactics relationships\r\n        model.techniques.forEach((technique: any) => {\r\n            const tacticIds = technique.getTactics().map((t: any) => t.id);\r\n            this.techniqueToTactics.set(technique.id, tacticIds);\r\n\r\n            // Build reverse index\r\n            tacticIds.forEach(tacticId => {\r\n                if (!this.tacticToTechniques.has(tacticId)) {\r\n                    this.tacticToTechniques.set(tacticId, []);\r\n                }\r\n                this.tacticToTechniques.get(tacticId)!.push(technique.id);\r\n            });\r\n        });\r\n\r\n        const buildTime = Date.now() - startTime;\r\n        console.log(`\u2705 Indexes built in ${buildTime}ms`);\r\n        console.log(`\ud83d\udcca Indexed ${this.techniqueToTactics.size} techniques`);\r\n    }\r\n\r\n    // Fast lookup without method calls\r\n    getTacticIdsForTechnique(techniqueId: string): string[] {\r\n        return this.techniqueToTactics.get(techniqueId) || [];\r\n    }\r\n\r\n    getTechniqueIdsForTactic(tacticId: string): string[] {\r\n        return this.tacticToTechniques.get(tacticId) || [];\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"concurrent-access-patterns",children:"Concurrent Access Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"thread-safe-data-access",children:"Thread-Safe Data Access"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Worker, isMainThread, parentPort, workerData } from 'worker_threads';\r\n\r\nclass ConcurrentAttackAnalyzer {\r\n    async analyzeInWorkers(model: any, numWorkers = 4) {\r\n        if (!isMainThread) {\r\n            // Worker thread code\r\n            this.workerAnalysis(workerData);\r\n            return;\r\n        }\r\n\r\n        // Main thread - distribute work\r\n        const techniques = model.techniques;\r\n        const chunkSize = Math.ceil(techniques.length / numWorkers);\r\n        const workers: Worker[] = [];\r\n        const results: any[] = [];\r\n\r\n        for (let i = 0; i < numWorkers; i++) {\r\n            const start = i * chunkSize;\r\n            const end = Math.min(start + chunkSize, techniques.length);\r\n            const chunk = techniques.slice(start, end);\r\n\r\n            const worker = new Worker(__filename, {\r\n                workerData: { techniques: chunk, workerId: i }\r\n            });\r\n\r\n            workers.push(worker);\r\n\r\n            worker.on('message', (result) => {\r\n                results.push(result);\r\n\r\n                if (results.length === numWorkers) {\r\n                    // All workers completed\r\n                    workers.forEach(w => w.terminate());\r\n                    this.combineResults(results);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private workerAnalysis(data: any) {\r\n        const { techniques, workerId } = data;\r\n\r\n        // Perform analysis on this chunk\r\n        const analysis = techniques.map((t: any) => ({\r\n            id: t.id,\r\n            name: t.name,\r\n            tacticCount: t.getTactics().length,\r\n            mitigationCount: t.getMitigations().length\r\n        }));\r\n\r\n        parentPort?.postMessage({\r\n            workerId,\r\n            results: analysis\r\n        });\r\n    }\r\n\r\n    private combineResults(results: any[]) {\r\n        const combined = results.flatMap(r => r.results);\r\n        console.log(`\ud83d\udcca Analyzed ${combined.length} techniques across ${results.length} workers`);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"production-optimization",children:"Production Optimization"}),"\n",(0,i.jsx)(n.h3,{id:"connection-pooling-for-multiple-requests",children:"Connection Pooling for Multiple Requests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class AttackDataPool {\r\n    private pool: any[] = [];\r\n    private maxSize = 10;\r\n    private currentSize = 0;\r\n\r\n    async getModel(): Promise<any> {\r\n        if (this.pool.length > 0) {\r\n            return this.pool.pop();\r\n        }\r\n\r\n        if (this.currentSize < this.maxSize) {\r\n            this.currentSize++;\r\n            return await this.createModel();\r\n        }\r\n\r\n        // Wait for a model to be returned to the pool\r\n        return new Promise((resolve) => {\r\n            const checkPool = () => {\r\n                if (this.pool.length > 0) {\r\n                    resolve(this.pool.pop());\r\n                } else {\r\n                    setTimeout(checkPool, 10);\r\n                }\r\n            };\r\n            checkPool();\r\n        });\r\n    }\r\n\r\n    returnModel(model: any) {\r\n        this.pool.push(model);\r\n    }\r\n\r\n    private async createModel(): Promise<any> {\r\n        const dataSource = new DataSource({\r\n            source: 'attack',\r\n            domain: 'enterprise-attack',\r\n            parsingMode: 'relaxed'\r\n        });\r\n\r\n        const uuid = await registerDataSource(dataSource);\r\n        return loadDataModel(uuid);\r\n    }\r\n}\r\n\r\n// Usage\r\nconst pool = new AttackDataPool();\r\n\r\nasync function handleRequest(req: any, res: any) {\r\n    const model = await pool.getModel();\r\n\r\n    try {\r\n        // Process request using model\r\n        const techniques = model.techniques.slice(0, 10);\r\n        res.json(techniques);\r\n    } finally {\r\n        pool.returnModel(model);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"lazy-loading-with-proxies",children:"Lazy Loading with Proxies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class LazyAttackModel {\r\n    private model: any;\r\n    private loadedSections = new Set<string>();\r\n\r\n    constructor(model: any) {\r\n        this.model = model;\r\n\r\n        // Create proxy for lazy loading\r\n        return new Proxy(this, {\r\n            get(target, prop: string) {\r\n                if (prop === 'techniques' && !target.loadedSections.has('techniques')) {\r\n                    console.log('\ud83d\udd04 Lazy loading techniques...');\r\n                    target.loadedSections.add('techniques');\r\n                    // Trigger any expensive initialization here\r\n                }\r\n\r\n                return target.model[prop];\r\n            }\r\n        });\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"monitoring-performance",children:"Monitoring Performance"}),"\n",(0,i.jsx)(n.h3,{id:"add-performance-metrics",children:"Add Performance Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"class PerformanceMonitor {\r\n    private metrics = new Map<string, number[]>();\r\n\r\n    time<T>(operation: string, fn: () => T): T {\r\n        const start = performance.now();\r\n        const result = fn();\r\n        const duration = performance.now() - start;\r\n\r\n        this.recordMetric(operation, duration);\r\n\r\n        return result;\r\n    }\r\n\r\n    async timeAsync<T>(operation: string, fn: () => Promise<T>): Promise<T> {\r\n        const start = performance.now();\r\n        const result = await fn();\r\n        const duration = performance.now() - start;\r\n\r\n        this.recordMetric(operation, duration);\r\n\r\n        return result;\r\n    }\r\n\r\n    private recordMetric(operation: string, duration: number) {\r\n        if (!this.metrics.has(operation)) {\r\n            this.metrics.set(operation, []);\r\n        }\r\n        this.metrics.get(operation)!.push(duration);\r\n    }\r\n\r\n    getStats(operation: string) {\r\n        const times = this.metrics.get(operation) || [];\r\n\r\n        if (times.length === 0) return null;\r\n\r\n        const sorted = [...times].sort((a, b) => a - b);\r\n\r\n        return {\r\n            count: times.length,\r\n            average: times.reduce((a, b) => a + b) / times.length,\r\n            median: sorted[Math.floor(sorted.length / 2)],\r\n            min: sorted[0],\r\n            max: sorted[sorted.length - 1],\r\n            p95: sorted[Math.floor(sorted.length * 0.95)]\r\n        };\r\n    }\r\n\r\n    printAllStats() {\r\n        console.log('\\n\ud83d\udcca Performance Stats:');\r\n        for (const [operation, _] of this.metrics) {\r\n            const stats = this.getStats(operation);\r\n            if (stats) {\r\n                console.log(`${operation}:`);\r\n                console.log(`  Average: ${stats.average.toFixed(2)}ms`);\r\n                console.log(`  Median: ${stats.median.toFixed(2)}ms`);\r\n                console.log(`  95th percentile: ${stats.p95.toFixed(2)}ms`);\r\n                console.log(`  Count: ${stats.count}`);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Usage\r\nconst monitor = new PerformanceMonitor();\r\n\r\nconst model = await monitor.timeAsync('data-loading', async () => {\r\n    const dataSource = new DataSource({\r\n        source: 'attack',\r\n        domain: 'enterprise-attack',\r\n        parsingMode: 'relaxed'\r\n    });\r\n    const uuid = await registerDataSource(dataSource);\r\n    return loadDataModel(uuid);\r\n});\r\n\r\nconst tactics = monitor.time('get-tactics', () => {\r\n    return model.techniques[0].getTactics();\r\n});\r\n\r\nmonitor.printAllStats();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-for-scale",children:"Configuration for Scale"}),"\n",(0,i.jsx)(n.h3,{id:"production-environment-variables",children:"Production Environment Variables"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# .env.production\r\nNODE_ENV=production\r\nATTACK_PARSING_MODE=strict\r\nATTACK_VERSION=15.1\r\nATTACK_CACHE_SIZE=100\r\nATTACK_WORKER_THREADS=4\r\nATTACK_MEMORY_LIMIT=2048\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Production configuration\r\nconst config = {\r\n    parsingMode: process.env.ATTACK_PARSING_MODE || 'relaxed',\r\n    version: process.env.ATTACK_VERSION || '15.1',\r\n    cacheSize: parseInt(process.env.ATTACK_CACHE_SIZE || '10'),\r\n    workerThreads: parseInt(process.env.ATTACK_WORKER_THREADS || '2'),\r\n    memoryLimit: parseInt(process.env.ATTACK_MEMORY_LIMIT || '1024')\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-performance-tips",children:"Key Performance Tips"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Relaxed Parsing"})," in development, strict in production"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Domains in Parallel"})," when you need multiple domains"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Relationship Results"})," for frequently accessed data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pre-compute Indexes"})," for complex relationship queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement Lazy Loading"})," for large datasets"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor Performance"})," with metrics and logging"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use Worker Threads"})," for CPU-intensive analysis"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pool Data Models"})," in high-throughput applications"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-guides",children:"Related Guides"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./manage-data-sources",children:"Manage Data Sources"})," - Efficient data source management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"./error-handling",children:"Handle Parsing Errors"})," - Deal with data quality issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"../reference/configuration",children:"Reference: Configuration"})," - All configuration options"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},7293:(e,n,r)=>{r.d(n,{A:()=>I});var t=r(6540),i=r(4848);function a(e){const{mdxAdmonitionTitle:n,rest:r}=function(e){const n=t.Children.toArray(e),r=n.find((e=>t.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),a=n.filter((e=>e!==r)),s=r?.props.children;return{mdxAdmonitionTitle:s,rest:a.length>0?(0,i.jsx)(i.Fragment,{children:a}):null}}(e.children),a=e.title??n;return{...e,...a&&{title:a},children:r}}var s=r(4164),o=r(1312),c=r(7559);const l="admonition_xJq3",d="admonitionHeading_Gvgb",h="admonitionIcon_Rf37",u="admonitionContent_BuS1";function m({type:e,className:n,children:r}){return(0,i.jsx)("div",{className:(0,s.A)(c.G.common.admonition,c.G.common.admonitionType(e),l,n),children:r})}function p({icon:e,title:n}){return(0,i.jsxs)("div",{className:d,children:[(0,i.jsx)("span",{className:h,children:e}),n]})}function g({children:e}){return e?(0,i.jsx)("div",{className:u,children:e}):null}function f(e){const{type:n,icon:r,title:t,children:a,className:s}=e;return(0,i.jsxs)(m,{type:n,className:s,children:[t||r?(0,i.jsx)(p,{title:t,icon:r}):null,(0,i.jsx)(g,{children:a})]})}function x(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const v={icon:(0,i.jsx)(x,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function j(e){return(0,i.jsx)(f,{...v,...e,className:(0,s.A)("alert alert--secondary",e.className),children:e.children})}function y(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const w={icon:(0,i.jsx)(y,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function T(e){return(0,i.jsx)(f,{...w,...e,className:(0,s.A)("alert alert--success",e.className),children:e.children})}function M(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const k={icon:(0,i.jsx)(M,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function q(e){return(0,i.jsx)(f,{...k,...e,className:(0,s.A)("alert alert--info",e.className),children:e.children})}function A(e){return(0,i.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const S={icon:(0,i.jsx)(A,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function P(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const z={icon:(0,i.jsx)(P,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const C={icon:(0,i.jsx)(A,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const b={...{note:j,tip:T,info:q,warning:function(e){return(0,i.jsx)(f,{...S,...e,className:(0,s.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,i.jsx)(f,{...z,...e,className:(0,s.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,i.jsx)(j,{title:"secondary",...e}),important:e=>(0,i.jsx)(q,{title:"important",...e}),success:e=>(0,i.jsx)(T,{title:"success",...e}),caution:function(e){return(0,i.jsx)(f,{...C,...e,className:(0,s.A)("alert alert--warning",e.className),children:e.children})}}};function I(e){const n=a(e),r=(t=n.type,b[t]||(console.warn(`No admonition component found for admonition type "${t}". Using Info as fallback.`),b.info));var t;return(0,i.jsx)(r,{...n})}},1367:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var t=r(7293),i=r(4848);function a(){return(0,i.jsx)(t.A,{type:"warning",title:"\ud83d\udea7 Work in Progress",icon:"\u26a0\ufe0f",children:"This document is a work in progress. Content may change, and some sections may be incomplete."})}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(6540);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);