"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9089],{2642:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"how-to-guides/validate-bundles","title":"How to Validate Custom STIX Bundles","description":"Ensure your custom ATT&CK data meets specification requirements","source":"@site/docs/how-to-guides/validate-bundles.mdx","sourceDirName":"how-to-guides","slug":"/how-to-guides/validate-bundles","permalink":"/attack-data-model/docs/how-to-guides/validate-bundles","draft":false,"unlisted":false,"editUrl":"https://github.com/mitre-attack/attack-data-model/tree/main/docusaurus/docs/how-to-guides/validate-bundles.mdx","tags":[],"version":"current","lastUpdatedBy":"Evan Lucchesi Leon","lastUpdatedAt":1758216887000,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"How to Manage Data Sources","permalink":"/attack-data-model/docs/how-to-guides/manage-data-sources"},"next":{"title":"How to Handle Parsing Errors Gracefully","permalink":"/attack-data-model/docs/how-to-guides/error-handling"}}');var i=r(4848),a=r(8453),o=r(1367);const s={},l="How to Validate Custom STIX Bundles",c={},d=[{value:"Problem",id:"problem",level:2},{value:"Solution Overview",id:"solution-overview",level:2},{value:"Step 1: Basic Bundle Validation",id:"step-1-basic-bundle-validation",level:2},{value:"Step 2: ATT&amp;CK Object Validation",id:"step-2-attck-object-validation",level:2},{value:"Step 3: Comprehensive Bundle Validator",id:"step-3-comprehensive-bundle-validator",level:2},{value:"Step 4: Batch Validation",id:"step-4-batch-validation",level:2},{value:"Step 5: Integration into Your Pipeline",id:"step-5-integration-into-your-pipeline",level:2},{value:"Common Validation Issues",id:"common-validation-issues",level:2},{value:"Missing Required Fields",id:"missing-required-fields",level:3},{value:"Invalid ATT&amp;CK IDs",id:"invalid-attck-ids",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Integration with CI/CD",id:"integration-with-cicd",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-to-validate-custom-stix-bundles",children:"How to Validate Custom STIX Bundles"})}),"\n",(0,i.jsx)(o.A,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Ensure your custom ATT&CK data meets specification requirements"})}),"\n",(0,i.jsx)(n.p,{children:"When working with custom STIX 2.1 bundles containing ATT&CK data, you need to validate that they conform to both the STIX specification and ATT&CK schema requirements. This guide shows you how to implement comprehensive validation for your custom data."}),"\n",(0,i.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,i.jsx)(n.p,{children:"You have custom STIX 2.1 bundles containing ATT&CK objects and need to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Verify they meet STIX 2.1 specification requirements"}),"\n",(0,i.jsx)(n.li,{children:"Ensure ATT&CK-specific validation rules are satisfied"}),"\n",(0,i.jsx)(n.li,{children:"Handle validation errors appropriately"}),"\n",(0,i.jsx)(n.li,{children:"Integrate validation into your data processing pipeline"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"solution-overview",children:"Solution Overview"}),"\n",(0,i.jsx)(n.p,{children:"Use the ATT&CK Data Model's validation system with proper error handling to validate custom bundles before processing them."}),"\n",(0,i.jsx)(n.h2,{id:"step-1-basic-bundle-validation",children:"Step 1: Basic Bundle Validation"}),"\n",(0,i.jsx)(n.p,{children:"Create a validation function for STIX bundles:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {\r\n    registerDataSource,\r\n    loadDataModel,\r\n    DataSource,\r\n    stixBundleSchema\r\n} from '@mitre-attack/attack-data-model';\r\nimport { z } from 'zod';\r\nimport fs from 'fs';\r\n\r\nasync function validateCustomBundle(filePath: string): Promise<boolean> {\r\n    try {\r\n        // Read the bundle file\r\n        const bundleContent = fs.readFileSync(filePath, 'utf8');\r\n        const bundleData = JSON.parse(bundleContent);\r\n\r\n        // Basic STIX bundle validation\r\n        const validatedBundle = stixBundleSchema.parse(bundleData);\r\n\r\n        console.log('\u2705 Bundle structure is valid');\r\n        console.log(`\ud83d\udce6 Bundle contains ${validatedBundle.objects.length} objects`);\r\n\r\n        return true;\r\n\r\n    } catch (error) {\r\n        if (error instanceof z.ZodError) {\r\n            console.error('\u274c Bundle validation failed:');\r\n            error.errors.forEach(err => {\r\n                console.error(`  - ${err.path.join('.')}: ${err.message}`);\r\n            });\r\n        } else {\r\n            console.error('\u274c Error reading bundle:', error);\r\n        }\r\n        return false;\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-2-attck-object-validation",children:"Step 2: ATT&CK Object Validation"}),"\n",(0,i.jsx)(n.p,{children:"Validate individual ATT&CK objects within the bundle:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import {\r\n    techniqueSchema,\r\n    tacticSchema,\r\n    groupSchema,\r\n    malwareSchema,\r\n    toolSchema,\r\n    campaignSchema\r\n} from '@mitre-attack/attack-data-model';\r\n\r\ninterface ValidationResult {\r\n    isValid: boolean;\r\n    errors: string[];\r\n    objectCounts: { [key: string]: number };\r\n}\r\n\r\nfunction validateAttackObjects(bundle: any): ValidationResult {\r\n    const result: ValidationResult = {\r\n        isValid: true,\r\n        errors: [],\r\n        objectCounts: {}\r\n    };\r\n\r\n    // Schema mapping for ATT&CK objects\r\n    const schemaMap: { [key: string]: z.ZodSchema } = {\r\n        'attack-pattern': techniqueSchema,\r\n        'x-mitre-tactic': tacticSchema,\r\n        'intrusion-set': groupSchema,\r\n        'malware': malwareSchema,\r\n        'tool': toolSchema,\r\n        'campaign': campaignSchema\r\n    };\r\n\r\n    bundle.objects.forEach((obj: any, index: number) => {\r\n        const objType = obj.type;\r\n\r\n        // Count objects by type\r\n        result.objectCounts[objType] = (result.objectCounts[objType] || 0) + 1;\r\n\r\n        // Validate ATT&CK objects\r\n        if (schemaMap[objType]) {\r\n            try {\r\n                schemaMap[objType].parse(obj);\r\n            } catch (error) {\r\n                result.isValid = false;\r\n                if (error instanceof z.ZodError) {\r\n                    error.errors.forEach(err => {\r\n                        result.errors.push(\r\n                            `Object ${index} (${objType}): ${err.path.join('.')}: ${err.message}`\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-3-comprehensive-bundle-validator",children:"Step 3: Comprehensive Bundle Validator"}),"\n",(0,i.jsx)(n.p,{children:"Combine validation steps into a comprehensive validator:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async function comprehensiveValidation(filePath: string): Promise<void> {\r\n    console.log(`\ud83d\udd0d Validating bundle: ${filePath}\\n`);\r\n\r\n    try {\r\n        // Step 1: Read and parse\r\n        const bundleContent = fs.readFileSync(filePath, 'utf8');\r\n        const bundleData = JSON.parse(bundleContent);\r\n\r\n        // Step 2: Validate bundle structure\r\n        console.log('\ud83d\udccb Validating STIX bundle structure...');\r\n        const validatedBundle = stixBundleSchema.parse(bundleData);\r\n        console.log('\u2705 Bundle structure is valid\\n');\r\n\r\n        // Step 3: Validate ATT&CK objects\r\n        console.log('\ud83c\udfaf Validating ATT&CK objects...');\r\n        const objectValidation = validateAttackObjects(validatedBundle);\r\n\r\n        // Display object counts\r\n        console.log('\ud83d\udcca Object counts:');\r\n        Object.entries(objectValidation.objectCounts).forEach(([type, count]) => {\r\n            console.log(`  ${type}: ${count}`);\r\n        });\r\n        console.log('');\r\n\r\n        // Display validation results\r\n        if (objectValidation.isValid) {\r\n            console.log('\u2705 All ATT&CK objects are valid');\r\n        } else {\r\n            console.log('\u274c ATT&CK object validation failed:');\r\n            objectValidation.errors.forEach(error => {\r\n                console.log(`  - ${error}`);\r\n            });\r\n        }\r\n\r\n        // Step 4: Test loading with Data Model\r\n        console.log('\\n\ud83d\udd04 Testing bundle loading...');\r\n        const dataSource = new DataSource({\r\n            source: 'file',\r\n            file: filePath,\r\n            parsingMode: 'strict' // Use strict mode for validation\r\n        });\r\n\r\n        const uuid = await registerDataSource(dataSource);\r\n        if (uuid) {\r\n            const attackDataModel = loadDataModel(uuid);\r\n            console.log('\u2705 Bundle loads successfully in ATT&CK Data Model');\r\n            console.log(`\ud83d\udcc8 Loaded ${attackDataModel.techniques.length} techniques`);\r\n            console.log(`\ud83d\udcc8 Loaded ${attackDataModel.tactics.length} tactics`);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error('\u274c Validation failed:', error);\r\n\r\n        if (error instanceof z.ZodError) {\r\n            console.error('\\n\ud83d\udcdd Detailed errors:');\r\n            error.errors.forEach(err => {\r\n                console.error(`  - ${err.path.join('.')}: ${err.message}`);\r\n            });\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-4-batch-validation",children:"Step 4: Batch Validation"}),"\n",(0,i.jsx)(n.p,{children:"Validate multiple bundles at once:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async function validateMultipleBundles(bundlePaths: string[]): Promise<void> {\r\n    console.log(`\ud83d\udd04 Validating ${bundlePaths.length} bundles...\\n`);\r\n\r\n    const results = await Promise.allSettled(\r\n        bundlePaths.map(async (path) => {\r\n            try {\r\n                await comprehensiveValidation(path);\r\n                return { path, success: true };\r\n            } catch (error) {\r\n                return { path, success: false, error };\r\n            }\r\n        })\r\n    );\r\n\r\n    // Summary\r\n    const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;\r\n    const failed = results.length - successful;\r\n\r\n    console.log('\\n\ud83d\udcca Validation Summary:');\r\n    console.log(`\u2705 Successful: ${successful}`);\r\n    console.log(`\u274c Failed: ${failed}`);\r\n\r\n    if (failed > 0) {\r\n        console.log('\\n\u274c Failed bundles:');\r\n        results.forEach(result => {\r\n            if (result.status === 'fulfilled' && !result.value.success) {\r\n                console.log(`  - ${result.value.path}`);\r\n            }\r\n        });\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"step-5-integration-into-your-pipeline",children:"Step 5: Integration into Your Pipeline"}),"\n",(0,i.jsx)(n.p,{children:"Create a reusable validation utility:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export interface BundleValidationOptions {\r\n    strictMode?: boolean;\r\n    validateRelationships?: boolean;\r\n    allowedObjectTypes?: string[];\r\n}\r\n\r\nexport class BundleValidator {\r\n    private options: BundleValidationOptions;\r\n\r\n    constructor(options: BundleValidationOptions = {}) {\r\n        this.options = {\r\n            strictMode: true,\r\n            validateRelationships: true,\r\n            ...options\r\n        };\r\n    }\r\n\r\n    async validate(filePath: string): Promise<ValidationResult> {\r\n        try {\r\n            // Implementation combining all validation steps\r\n            const bundleContent = fs.readFileSync(filePath, 'utf8');\r\n            const bundleData = JSON.parse(bundleContent);\r\n\r\n            // Validate with appropriate settings\r\n            const bundleValidation = stixBundleSchema.parse(bundleData);\r\n            const objectValidation = validateAttackObjects(bundleValidation);\r\n\r\n            if (this.options.validateRelationships) {\r\n                // Test loading to validate relationships\r\n                const dataSource = new DataSource({\r\n                    source: 'file',\r\n                    file: filePath,\r\n                    parsingMode: this.options.strictMode ? 'strict' : 'relaxed'\r\n                });\r\n\r\n                await registerDataSource(dataSource);\r\n            }\r\n\r\n            return {\r\n                isValid: objectValidation.isValid,\r\n                errors: objectValidation.errors,\r\n                objectCounts: objectValidation.objectCounts\r\n            };\r\n\r\n        } catch (error) {\r\n            return {\r\n                isValid: false,\r\n                errors: [`Validation failed: ${error}`],\r\n                objectCounts: {}\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Usage example\r\nconst validator = new BundleValidator({\r\n    strictMode: true,\r\n    validateRelationships: true\r\n});\r\n\r\nconst result = await validator.validate('my-custom-bundle.json');\r\nif (!result.isValid) {\r\n    console.error('Validation failed:', result.errors);\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"common-validation-issues",children:"Common Validation Issues"}),"\n",(0,i.jsx)(n.h3,{id:"missing-required-fields",children:"Missing Required Fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'// \u274c Invalid technique - missing required fields\r\n{\r\n    "type": "attack-pattern",\r\n    "id": "attack-pattern--12345678-1234-1234-1234-123456789012",\r\n    "name": "My Custom Technique"\r\n    // Missing: spec_version, created, modified, description, etc.\r\n}\r\n\r\n// \u2705 Valid technique with all required fields\r\n{\r\n    "type": "attack-pattern",\r\n    "id": "attack-pattern--12345678-1234-1234-1234-123456789012",\r\n    "spec_version": "2.1",\r\n    "created": "2023-01-01T00:00:00.000Z",\r\n    "modified": "2023-01-01T00:00:00.000Z",\r\n    "name": "My Custom Technique",\r\n    "description": "Description of the technique",\r\n    "x_mitre_attack_spec_version": "3.3.0",\r\n    "x_mitre_version": "1.0"\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"invalid-attck-ids",children:"Invalid ATT&CK IDs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Validate ATT&CK ID format\r\nfunction validateAttackId(id: string, objectType: string): boolean {\r\n    const patterns: { [key: string]: RegExp } = {\r\n        'attack-pattern': /^T\\d{4}(\\.\\d{3})?$/, // T1234 or T1234.001\r\n        'x-mitre-tactic': /^TA\\d{4}$/,          // TA0001\r\n        'intrusion-set': /^G\\d{4}$/,            // G0001\r\n        'malware': /^S\\d{4}$/,                  // S0001\r\n        'tool': /^S\\d{4}$/                      // S0001\r\n    };\r\n\r\n    const pattern = patterns[objectType];\r\n    return pattern ? pattern.test(id) : true;\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.p,{children:"For large bundles, implement streaming validation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { Transform } from 'stream';\r\nimport { parse } from 'stream-json';\r\nimport StreamValues from 'stream-json/streamers/StreamValues';\r\n\r\nasync function validateLargeBundle(filePath: string): Promise<void> {\r\n    const pipeline = fs.createReadStream(filePath)\r\n        .pipe(parse())\r\n        .pipe(StreamValues.withParser())\r\n        .pipe(new Transform({\r\n            objectMode: true,\r\n            transform(chunk, encoding, callback) {\r\n                try {\r\n                    // Validate individual objects\r\n                    const obj = chunk.value;\r\n                    // Perform validation on obj\r\n                    callback(null, chunk);\r\n                } catch (error) {\r\n                    callback(error);\r\n                }\r\n            }\r\n        }));\r\n\r\n    return new Promise((resolve, reject) => {\r\n        pipeline.on('end', resolve);\r\n        pipeline.on('error', reject);\r\n    });\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-cicd",children:"Integration with CI/CD"}),"\n",(0,i.jsx)(n.p,{children:"Add validation to your build pipeline:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# validate-bundles.sh\r\n\r\necho "Validating ATT&CK bundles..."\r\n\r\nfor bundle in data/*.json; do\r\n    echo "Validating $bundle..."\r\n    npx tsx validate-bundle.ts "$bundle"\r\n\r\n    if [ $? -ne 0 ]; then\r\n        echo "\u274c Validation failed for $bundle"\r\n        exit 1\r\n    fi\r\ndone\r\n\r\necho "\u2705 All bundles validated successfully"\n'})}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},7293:(e,n,r)=>{r.d(n,{A:()=>P});var t=r(6540),i=r(4848);function a(e){const{mdxAdmonitionTitle:n,rest:r}=function(e){const n=t.Children.toArray(e),r=n.find((e=>t.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),a=n.filter((e=>e!==r)),o=r?.props.children;return{mdxAdmonitionTitle:o,rest:a.length>0?(0,i.jsx)(i.Fragment,{children:a}):null}}(e.children),a=e.title??n;return{...e,...a&&{title:a},children:r}}var o=r(4164),s=r(1312),l=r(7559);const c="admonition_xJq3",d="admonitionHeading_Gvgb",u="admonitionIcon_Rf37",h="admonitionContent_BuS1";function p({type:e,className:n,children:r}){return(0,i.jsx)("div",{className:(0,o.A)(l.G.common.admonition,l.G.common.admonitionType(e),c,n),children:r})}function m({icon:e,title:n}){return(0,i.jsxs)("div",{className:d,children:[(0,i.jsx)("span",{className:u,children:e}),n]})}function f({children:e}){return e?(0,i.jsx)("div",{className:h,children:e}):null}function v(e){const{type:n,icon:r,title:t,children:a,className:o}=e;return(0,i.jsxs)(p,{type:n,className:o,children:[t||r?(0,i.jsx)(m,{title:t,icon:r}):null,(0,i.jsx)(f,{children:a})]})}function g(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const j={icon:(0,i.jsx)(g,{}),title:(0,i.jsx)(s.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function b(e){return(0,i.jsx)(v,{...j,...e,className:(0,o.A)("alert alert--secondary",e.className),children:e.children})}function x(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const T={icon:(0,i.jsx)(x,{}),title:(0,i.jsx)(s.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function y(e){return(0,i.jsx)(v,{...T,...e,className:(0,o.A)("alert alert--success",e.className),children:e.children})}function S(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const C={icon:(0,i.jsx)(S,{}),title:(0,i.jsx)(s.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function V(e){return(0,i.jsx)(v,{...C,...e,className:(0,o.A)("alert alert--info",e.className),children:e.children})}function w(e){return(0,i.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const A={icon:(0,i.jsx)(w,{}),title:(0,i.jsx)(s.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function k(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const B={icon:(0,i.jsx)(k,{}),title:(0,i.jsx)(s.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const M={icon:(0,i.jsx)(w,{}),title:(0,i.jsx)(s.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const N={...{note:b,tip:y,info:V,warning:function(e){return(0,i.jsx)(v,{...A,...e,className:(0,o.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,i.jsx)(v,{...B,...e,className:(0,o.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,i.jsx)(b,{title:"secondary",...e}),important:e=>(0,i.jsx)(V,{title:"important",...e}),success:e=>(0,i.jsx)(y,{title:"success",...e}),caution:function(e){return(0,i.jsx)(v,{...M,...e,className:(0,o.A)("alert alert--warning",e.className),children:e.children})}}};function P(e){const n=a(e),r=(t=n.type,N[t]||(console.warn(`No admonition component found for admonition type "${t}". Using Info as fallback.`),N.info));var t;return(0,i.jsx)(r,{...n})}},1367:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var t=r(7293),i=r(4848);function a(){return(0,i.jsx)(t.A,{type:"warning",title:"\ud83d\udea7 Work in Progress",icon:"\u26a0\ufe0f",children:"This document is a work in progress. Content may change, and some sections may be incomplete."})}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);