"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6314],{8851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"contributing/coding-style","title":"Coding Style & Linting","description":"ADM enforces a single source-of-truth for style:","source":"@site/docs/contributing/coding-style.mdx","sourceDirName":"contributing","slug":"/contributing/coding-style","permalink":"/attack-data-model/docs/contributing/coding-style","draft":false,"unlisted":false,"editUrl":"https://github.com/mitre-attack/attack-data-model/tree/main/docusaurus/docs/contributing/coding-style.mdx","tags":[],"version":"current","lastUpdatedBy":"Charissa Miller","lastUpdatedAt":1759926247000,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Development Setup","permalink":"/attack-data-model/docs/contributing/dev-setup"},"next":{"title":"Running and Writing Tests","permalink":"/attack-data-model/docs/contributing/tests"}}');var r=n(4848),s=n(8453);const c={},d="Coding Style & Linting",o={},l=[{value:"ESLint + Prettier",id:"eslint--prettier",level:2},{value:"Typical workflow",id:"typical-workflow",level:2},{value:"TypeScript strictness",id:"typescript-strictness",level:2}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"coding-style--linting",children:"Coding Style & Linting"})}),"\n",(0,r.jsxs)(t.p,{children:["ADM enforces a ",(0,r.jsx)(t.strong,{children:"single source-of-truth"})," for style:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"ESLint"})," \u2013 ",(0,r.jsx)(t.code,{children:"@eslint/js"})," + custom rules"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Prettier"})," \u2013 code formatting"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"commitlint"})," \u2013 conventional-commits"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"eslint--prettier",children:"ESLint + Prettier"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm run lint        # read-only\nnpm run format      # auto-fix + prettier\n"})}),"\n",(0,r.jsxs)(t.p,{children:["CI will fail if ",(0,r.jsx)(t.code,{children:"npm run lint"})," reports errors or if Prettier formatting changes are uncommitted."]}),"\n",(0,r.jsx)(t.h2,{id:"typical-workflow",children:"Typical workflow"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'git checkout -b feat/my-awesome-change\n# \u2026code\u2026\nnpm run format\ngit add .\ngit commit -m "feat(core): add awesome change"\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The commit message is checked by ",(0,r.jsx)(t.a,{href:"https://commitlint.js.org",children:"commitlint"}),".\nPrefix your commit with one of the following:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Prefix"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Example Commit Command"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"feat"}),(0,r.jsx)(t.td,{children:"A new feature"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'git commit -m "feat: add new schema"'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"fix"}),(0,r.jsx)(t.td,{children:"A bug fix"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'git commit -m "fix: correct null pointer exception"'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"docs"}),(0,r.jsx)(t.td,{children:"Documentation only changes"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'git commit -m "docs: update installation instructions"'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"chore"}),(0,r.jsx)(t.td,{children:"Routine tasks, maintenance, or tooling"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'git commit -m "chore: update dependency versions"'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"refactor"}),(0,r.jsx)(t.td,{children:"Code changes that neither fix nor add features"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'git commit -m "refactor: simplify token validation"'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"test"}),(0,r.jsx)(t.td,{children:"Adding or updating tests"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'git commit -m "test: add tests for date parser"'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"perf"}),(0,r.jsx)(t.td,{children:"Performance improvements"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:'git commit -m "perf: optimize query performance"'})})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"typescript-strictness",children:"TypeScript strictness"}),"\n",(0,r.jsxs)(t.p,{children:["The library is compiled with ",(0,r.jsx)(t.code,{children:'"strict": true'})," and imports must be path-alias aware (",(0,r.jsx)(t.code,{children:"@/\u2026"}),").\nRun ",(0,r.jsx)(t.code,{children:"npm run build"})," to catch any type errors locally."]}),"\n",(0,r.jsx)(t.hr,{})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>d});var i=n(6540);const r={},s=i.createContext(r);function c(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);