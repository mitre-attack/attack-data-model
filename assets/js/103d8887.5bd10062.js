"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6590],{8520:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"tutorials/relationships","title":"Understanding ATT&CK Relationships","description":"Master navigation between related ATT&CK objects","source":"@site/docs/tutorials/relationships.md","sourceDirName":"tutorials","slug":"/tutorials/relationships","permalink":"/attack-data-model/docs/tutorials/relationships","draft":false,"unlisted":false,"editUrl":"https://github.com/mitre-attack/attack-data-model/tree/main/docusaurus/docs/tutorials/relationships.md","tags":[],"version":"current","lastUpdatedBy":"Sean Sica","lastUpdatedAt":1760734916000,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Building a Technique Browser","permalink":"/attack-data-model/docs/tutorials/technique-browser"},"next":{"title":"Multi-Domain ATT&CK Analysis","permalink":"/attack-data-model/docs/tutorials/multi-domain-analysis"}}');var r=i(4848),s=i(8453),o=i(1367);const a={},l="Understanding ATT&CK Relationships",c={},h=[{value:"What You&#39;ll Learn",id:"what-youll-learn",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Set Up Your Relationship Explorer",id:"step-1-set-up-your-relationship-explorer",level:2},{value:"Step 2: Explore Technique-Tactic Relationships",id:"step-2-explore-technique-tactic-relationships",level:2},{value:"Step 3: Discover Group-Technique Relationships (Procedures)",id:"step-3-discover-group-technique-relationships-procedures",level:2},{value:"Step 4: Explore Software Usage Patterns",id:"step-4-explore-software-usage-patterns",level:2},{value:"Step 5: Navigate Parent-Child Technique Relationships",id:"step-5-navigate-parent-child-technique-relationships",level:2},{value:"Step 6: Discover Mitigation Relationships",id:"step-6-discover-mitigation-relationships",level:2},{value:"Step 7: Explore Transitive Relationships",id:"step-7-explore-transitive-relationships",level:2},{value:"Step 8: Run All Relationship Explorations",id:"step-8-run-all-relationship-explorations",level:2},{value:"Step 9: Run Your Relationship Explorer",id:"step-9-run-your-relationship-explorer",level:2},{value:"What You&#39;ve Learned",id:"what-youve-learned",level:2},{value:"Key Relationship Navigation Methods",id:"key-relationship-navigation-methods",level:2},{value:"Real-World Applications",id:"real-world-applications",level:2},{value:"Advanced Relationship Patterns",id:"advanced-relationship-patterns",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"understanding-attck-relationships",children:"Understanding ATT&CK Relationships"})}),"\n",(0,r.jsx)(o.A,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Master navigation between related ATT&CK objects"})}),"\n",(0,r.jsx)(n.p,{children:"ATT&CK's power comes from the rich relationships between techniques, tactics, groups, software, and mitigations. In this tutorial, you'll learn to navigate these connections to uncover threat intelligence insights and build comprehensive security analysis capabilities."}),"\n",(0,r.jsx)(n.h2,{id:"what-youll-learn",children:"What You'll Learn"}),"\n",(0,r.jsx)(n.p,{children:"By the end of this tutorial, you'll understand how to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Navigate technique-to-tactic relationships"}),"\n",(0,r.jsx)(n.li,{children:"Explore group-to-technique connections (procedures)"}),"\n",(0,r.jsx)(n.li,{children:"Discover software usage patterns"}),"\n",(0,r.jsx)(n.li,{children:"Find mitigations for specific techniques"}),"\n",(0,r.jsx)(n.li,{children:"Work with parent/sub-technique hierarchies"}),"\n",(0,r.jsx)(n.li,{children:"Trace transitive relationships across object types"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Complete the previous tutorials:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./your-first-query",children:"Your First ATT&CK Query"})})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"./technique-browser",children:"Building a Technique Browser"})})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"step-1-set-up-your-relationship-explorer",children:"Step 1: Set Up Your Relationship Explorer"}),"\n",(0,r.jsx)(n.p,{children:"Create a new project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir attack-relationships\r\ncd attack-relationships\r\nnpm init -y\r\nnpm install @mitre-attack/attack-data-model\r\nnpm install -D typescript tsx @types/node\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"relationship-explorer.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { registerDataSource, loadDataModel, DataSourceRegistration, AttackDataModel } from '@mitre-attack/attack-data-model';\r\n\r\nclass RelationshipExplorer {\r\n    private attackDataModel: AttackDataModel;\r\n\r\n    async initialize(): Promise<void> {\r\n        console.log('Initializing ATT&CK Relationship Explorer...\\n');\r\n\r\n        const dataSource = new DataSourceRegistration({\r\n            source: 'attack',\r\n            domain: 'enterprise-attack',\r\n            version: '17.1',\r\n            parsingMode: 'relaxed'\r\n        });\r\n\r\n        const uuid = await registerDataSource(dataSource);\r\n        if (!uuid) throw new Error('Failed to register data source');\r\n\r\n        this.attackDataModel = loadDataModel(uuid);\r\n        console.log('Data loaded successfully!\\n');\r\n    }\r\n\r\n    // Returns an array of tactic objects for a given technique\r\n    getTechniqueTactics(technique: any): any[] {\r\n        const killChainPhases = technique.kill_chain_phases || [];\r\n        const tacticShortnames = killChainPhases.map(phase => phase.phase_name);\r\n\r\n        const tactics = this.attackDataModel.tactics.filter(\r\n            tactic => tacticShortnames.includes(tactic.x_mitre_shortname)\r\n        );\r\n        return tactics;\r\n    } \r\n\r\n    // We'll add exploration methods here...\r\n}\r\n\r\n// Initialize and run examples\r\nasync function main() {\r\n    const explorer = new RelationshipExplorer();\r\n    await explorer.initialize();\r\n\r\n    // We'll add example calls here...\r\n}\r\n\r\nmain().catch(console.error);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-2-explore-technique-tactic-relationships",children:"Step 2: Explore Technique-Tactic Relationships"}),"\n",(0,r.jsx)(n.p,{children:"Add this method to understand how techniques map to tactical goals:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    exploreTechniqueTactics(): void {\r\n        console.log('TECHNIQUE-TACTIC RELATIONSHIPS\\n');\r\n\r\n        // Find a specific technique\r\n        const technique = this.attackDataModel.techniques.find(t =>\r\n            t.external_references[0].external_id === 'T1055'\r\n        ) as TechniqueImpl | undefined;\r\n        \r\n        if (!technique) return;\r\n\r\n        console.log(`Technique: ${technique.name} (${technique.external_references[0].external_id})`);\r\n        console.log(`Description: ${technique.description.substring(0, 100)}...\\n`);\r\n\r\n        // Get associated tactics\r\n        const tactics = this.getTechniqueTactics(technique);\r\n        console.log(`This technique is used for ${tactics.length} tactical goal(s):`);\r\n\r\n        tactics.forEach((tactic, index) => {\r\n            console.log(`${index + 1}. ${tactic.name}`);\r\n            console.log(`   Purpose: ${tactic.description.substring(0, 80)}...\\n`);\r\n        });\r\n\r\n        console.log('This shows how one technique can serve multiple adversary goals!\\n');\r\n    }\n"})}),"\n",(0,r.jsx)(n.p,{children:"Add the method call to your main function:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    // In main function:\r\n    await explorer.exploreTechniqueTactics();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-3-discover-group-technique-relationships-procedures",children:"Step 3: Discover Group-Technique Relationships (Procedures)"}),"\n",(0,r.jsx)(n.p,{children:"Add this method to explore how groups use techniques:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    exploreGroupTechniques(): void {\r\n        console.log('GROUP-TECHNIQUE RELATIONSHIPS (Procedures)\\n');\r\n\r\n        // Find APT1 group\r\n        const apt1 = this.attackDataModel.groups.find(g =>\r\n            g.external_references[0].external_id === 'G0006'\r\n        );\r\n\r\n        if (!apt1) return;\r\n\r\n        console.log(`Group: ${apt1.name} (${apt1.external_references[0].external_id})`);\r\n        console.log(`Description: ${apt1.description.substring(0, 120)}...\\n`);\r\n\r\n        // Get techniques used by this group\r\n        const techniques = apt1.getTechniques();\r\n        console.log(`This group uses ${techniques.length} different techniques:`);\r\n\r\n        // Show first 5 techniques\r\n        techniques.slice(0, 5).forEach((technique, index) => {\r\n            console.log(`${index + 1}. ${technique.name} (${technique.external_references[0].external_id})`);\r\n\r\n            // Find the relationship to get procedure details\r\n            const relationship = this.attackDataModel.relationships.find(rel =>\r\n                rel.source_ref === apt1.id &&\r\n                rel.target_ref === technique.id &&\r\n                rel.relationship_type === 'uses'\r\n            );\r\n\r\n            if (relationship && relationship.description) {\r\n                console.log(`   Procedure: ${relationship.description.substring(0, 100)}...`);\r\n            }\r\n            console.log('');\r\n        });\r\n\r\n        console.log(`... and ${techniques.length - 5} more techniques\\n`);\r\n    }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-4-explore-software-usage-patterns",children:"Step 4: Explore Software Usage Patterns"}),"\n",(0,r.jsx)(n.p,{children:"Add this method to understand software-technique relationships:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    exploreSoftwareUsage(): void {\r\n        console.log('SOFTWARE-TECHNIQUE RELATIONSHIPS\\n');\r\n\r\n        // Find Mimikatz (a well-known tool)\r\n        const mimikatz = this.attackDataModel.tools.find(tool =>\r\n            tool.name.toLowerCase().includes('mimikatz')\r\n        );\r\n\r\n        if (!mimikatz) return;\r\n\r\n        console.log(`Tool: ${mimikatz.name} (${mimikatz.external_references[0].external_id})`);\r\n        console.log(`Description: ${mimikatz.description.substring(0, 120)}...\\n`);\r\n\r\n        // Get techniques used by this software\r\n        const techniques = mimikatz.getTechniques();\r\n        console.log(`This tool implements ${techniques.length} techniques:`);\r\n\r\n        techniques.forEach((technique, index) => {\r\n            console.log(`${index + 1}. ${technique.name} (${technique.external_references[0].external_id})`);\r\n\r\n            // Show which tactics this technique supports\r\n            const tactics = this.getTechniqueTactics(technique);\r\n\r\n            console.log(`   Supports tactics: ${tactics.map(t => t.name).join(', ')}\\n`);\r\n        });\r\n        const relationships = this.attackDataModel.relationships;\r\n\r\n        const mimikatzId = mimikatz.id;\r\n\r\n        // Find all \"uses\" relationships where target is Mimikatz\r\n        const groupUsesMimikatz = relationships.filter(rel =>\r\n            rel.relationship_type === \"uses\" &&\r\n            rel.target_ref === mimikatzId &&\r\n            rel.source_ref.startsWith(\"intrusion-set--\") // group id prefix\r\n        );\r\n\r\n        // Get group objects\r\n        const groupsUsingMimikatz = groupUsesMimikatz.map(rel =>\r\n            this.attackDataModel.groups.find(group => group.id === rel.source_ref)\r\n        ).filter(Boolean); // Remove undefined if any\r\n\r\n        console.log(`This tool is used by ${groupsUsingMimikatz.length} groups:`);\r\n        groupsUsingMimikatz.slice(0, 3).forEach((group, index) => {\r\n            console.log(`${index + 1}. ${group.name} (${group.external_references[0].external_id})`);\r\n        });\r\n        console.log('');\r\n    }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-navigate-parent-child-technique-relationships",children:"Step 5: Navigate Parent-Child Technique Relationships"}),"\n",(0,r.jsx)(n.p,{children:"Add this method to explore sub-technique hierarchies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    exploreSubtechniqueRelationships(): void {\r\n        console.log('PARENT-SUBTECHNIQUE RELATIONSHIPS\\n');\r\n\r\n        // Find a parent technique with sub-techniques\r\n        const parentTechnique = this.attackDataModel.techniques.find(t =>\r\n            t.external_references[0].external_id === 'T1003' &&\r\n            !t.x_mitre_is_subtechnique\r\n        ) as TechniqueImpl | undefined;\r\n\r\n        if (!parentTechnique) return;\r\n\r\n        console.log(`Parent Technique: ${parentTechnique.name} (${parentTechnique.external_references[0].external_id})`);\r\n        console.log(`Description: ${parentTechnique.description.substring(0, 120)}...\\n`);\r\n\r\n        // Get sub-techniques\r\n        \r\n        const subTechniques = parentTechnique.getSubTechniques();\r\n        console.log(`This technique has ${subTechniques.length} sub-techniques:`);\r\n\r\n        subTechniques.forEach((subTech, index) => {\r\n            console.log(`${index + 1}. ${subTech.name} (${subTech.external_references[0].external_id})`);\r\n            console.log(`   Platforms: ${subTech.x_mitre_platforms?.join(', ') || 'Not specified'}\\n`);\r\n        });\r\n\r\n        // Navigate back from sub-technique to parent\r\n        if (subTechniques.length > 0) {\r\n            const firstSubTech = subTechniques[0];\r\n            const parentFromChild = firstSubTech.getParentTechnique();\r\n\r\n            console.log(`Navigation verification:`);\r\n            console.log(`Sub-technique \"${firstSubTech.name}\" \u2192 Parent: \"${parentFromChild?.name}\"`);\r\n            console.log(`Bidirectional navigation works!\\n`);\r\n        }\r\n    }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-6-discover-mitigation-relationships",children:"Step 6: Discover Mitigation Relationships"}),"\n",(0,r.jsx)(n.p,{children:"Add this method to find defensive measures:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    exploreMitigationRelationships(): void {\r\n        console.log('MITIGATION-TECHNIQUE RELATIONSHIPS\\n');\r\n\r\n        // Find a technique\r\n        const technique = this.attackDataModel.techniques.find(t =>\r\n            t.external_references[0].external_id === 'T1059'\r\n        );\r\n\r\n        if (!technique) return;\r\n\r\n        console.log(`Technique: ${technique.name} (${technique.external_references[0].external_id})`);\r\n        console.log(`Description: ${technique.description.substring(0, 120)}...\\n`);\r\n\r\n        // Get mitigations for this technique\r\n        const mitigations = technique.getMitigations();\r\n        console.log(`This technique can be mitigated by ${mitigations.length} measures:`);\r\n\r\n        mitigations.forEach((mitigation, index) => {\r\n            console.log(`${index + 1}. ${mitigation.name} (${mitigation.external_references[0].external_id})`);\r\n\r\n            // Find the relationship to get mitigation guidance\r\n            const relationship = this.attackDataModel.relationships.find(rel =>\r\n                rel.source_ref === mitigation.id &&\r\n                rel.target_ref === technique.id &&\r\n                rel.relationship_type === 'mitigates'\r\n            );\r\n\r\n            if (relationship && relationship.description) {\r\n                console.log(`   Guidance: ${relationship.description.substring(0, 100)}...\\n`);\r\n            }\r\n        });\r\n    }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-7-explore-transitive-relationships",children:"Step 7: Explore Transitive Relationships"}),"\n",(0,r.jsx)(n.p,{children:"Add this method to trace complex relationship chains:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    exploreTransitiveRelationships(): void {\r\n        console.log('TRANSITIVE RELATIONSHIPS (Group \u2192 Software \u2192 Techniques)\\n');\r\n\r\n        // Find a group\r\n        const group = this.attackDataModel.groups.find(g =>\r\n            g.external_references[0].external_id === 'G0016'\r\n        );\r\n\r\n        if (!group) return;\r\n\r\n        console.log(`Group: ${group.name} (${group.external_references[0].external_id})`);\r\n        console.log(`Description: ${group.description.substring(0, 120)}...\\n`);\r\n        \r\n        const relationships = this.attackDataModel.relationships;\r\n\r\n        // Get software used by the group\r\n        const softwareUsedByGroup = relationships.filter(rel =>\r\n            rel.relationship_type === \"uses\" &&\r\n            rel.source_ref === group.id &&\r\n            (\r\n                rel.target_ref.startsWith(\"malware--\") ||\r\n                rel.target_ref.startsWith(\"tool--\")\r\n            )\r\n        );\r\n\r\n        // Get software objects\r\n        const allSoftware = [\r\n            ...this.attackDataModel.malware,\r\n            ...this.attackDataModel.tools\r\n        ];\r\n        const software = softwareUsedByGroup.map(rel =>\r\n            allSoftware.find(soft => soft.id === rel.target_ref)\r\n        ).filter(Boolean);\r\n\r\n        console.log(`This group uses ${software.length} software tools:`);\r\n\r\n        software.slice(0, 3).forEach((soft, index) => {\r\n            console.log(`\\n${index + 1}. ${soft.name} (${soft.external_references[0].external_id})`);\r\n\r\n            // Get techniques used by this software\r\n            const techniques = soft.getTechniques();\r\n            console.log(`   \u2192 Implements ${techniques.length} techniques:`);\r\n\r\n            techniques.slice(0, 2).forEach((technique, techIndex) => {\r\n                console.log(`     ${techIndex + 1}. ${technique.name} (${technique.external_references[0].external_id})`);\r\n\r\n                // Show tactics supported\r\n                // Show which tactics this technique supports\r\n                const tactics = this.getTechniqueTactics(technique);\r\n                console.log(`        Tactics: ${tactics.map(t => t.name).join(', ')}`);\r\n            });\r\n\r\n            if (techniques.length > 2) {\r\n                console.log(`     ... and ${techniques.length - 2} more techniques`);\r\n            }\r\n        });\r\n\r\n        console.log(`\\nThis shows the relationship chain: Group \u2192 Software \u2192 Techniques \u2192 Tactics\\n`);\r\n    }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-8-run-all-relationship-explorations",children:"Step 8: Run All Relationship Explorations"}),"\n",(0,r.jsx)(n.p,{children:"Update your main function to run all examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"async function main() {\r\n    const explorer = new RelationshipExplorer();\r\n    await explorer.initialize();\r\n\r\n    // Run all relationship explorations\r\n    explorer.exploreTechniqueTactics();\r\n    explorer.exploreGroupTechniques();\r\n    explorer.exploreSoftwareUsage();\r\n    explorer.exploreSubtechniqueRelationships();\r\n    explorer.exploreMitigationRelationships();\r\n    explorer.exploreTransitiveRelationships();\r\n\r\n    console.log('Relationship exploration complete!\\n');\r\n    console.log('Key takeaways:');\r\n    console.log('   - ATT&CK objects are richly interconnected');\r\n    console.log('   - Relationships carry descriptive context');\r\n    console.log('   - Navigation methods simplify complex queries');\r\n    console.log('   - Transitive relationships reveal attack patterns');\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-9-run-your-relationship-explorer",children:"Step 9: Run Your Relationship Explorer"}),"\n",(0,r.jsx)(n.p,{children:"Execute your script to see ATT&CK relationships in action:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx tsx relationship-explorer.ts\n"})}),"\n",(0,r.jsx)(n.p,{children:"You'll see a comprehensive exploration of ATT&CK relationships, showing how different objects connect and relate to each other."}),"\n",(0,r.jsx)(n.h2,{id:"what-youve-learned",children:"What You've Learned"}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, you've mastered:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Technique-Tactic Mapping"}),": Understanding how techniques serve tactical goals"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Procedure Discovery"}),": Finding how groups use specific techniques"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Software Analysis"}),": Exploring tool capabilities and usage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hierarchy Navigation"}),": Working with parent and sub-technique relationships"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mitigation Research"}),": Discovering defensive measures for techniques"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transitive Relationships"}),": Tracing complex relationship chains"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-relationship-navigation-methods",children:"Key Relationship Navigation Methods"}),"\n",(0,r.jsx)(n.p,{children:"You've used these essential methods:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"getTactics()"})}),": Find tactics associated with a technique"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"getTechniques()"})}),": Get techniques used by groups or software"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"getSubtechniques()"})})," / ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"getParentTechnique()"})}),": Navigate technique hierarchies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"getMitigations()"})}),": Find defensive measures for techniques"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"getAssociatedSoftware()"})}),": Discover tools used by groups"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"real-world-applications",children:"Real-World Applications"}),"\n",(0,r.jsx)(n.p,{children:"These relationship navigation skills enable:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Threat Intelligence"}),": Mapping adversary capabilities and behaviors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security Analysis"}),": Understanding attack patterns and defense priorities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tool Development"}),": Building comprehensive security platforms"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Research"}),": Discovering trends and patterns in adversary tactics"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-relationship-patterns",children:"Advanced Relationship Patterns"}),"\n",(0,r.jsx)(n.p,{children:"Try exploring these patterns on your own:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Find all groups that use a specific technique\r\nconst groupsUsingTechnique = attackDataModel.groups.filter(group =>\r\n    group.getTechniques().some(tech => tech.id === specificTechnique.id)\r\n);\r\n\r\n// Find techniques that have no mitigations\r\nconst unmitigatedTechniques = attackDataModel.techniques.filter(tech =>\r\n    tech.getMitigations().length === 0\r\n);\r\n\r\n// Find software used across multiple tactics\r\nconst multiTacticSoftware = attackDataModel.tools.filter(tool =>\r\n    new Set(tool.getTechniques().flatMap(tech => this.getTechniqueTactics(tech))).size > 3\r\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.p,{children:"You've completed all tutorials! Now you can:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../how-to-guides/",children:"Apply these skills in How-to Guides"})})," - Solve specific problems"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../reference/",children:"Explore the Reference Documentation"})})," - Understand the complete API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../explanation/",children:"Read Explanations"})})," - Learn about design decisions and architecture"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Build your own applications"})," using the patterns you've learned"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:'"Cannot read property of undefined" errors'}),": Some objects might not have all expected relationships. Always check if methods return empty arrays or null values."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance with large datasets"}),": Relationship navigation is efficient, but filtering large result sets may take time. Consider caching results for repeated queries."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Missing relationships"}),": Remember that ATT&CK data evolves. Some relationships may not exist in all versions or domains."]}),"\n",(0,r.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7293:(e,n,i)=>{i.d(n,{A:()=>$});var t=i(6540),r=i(4848);function s(e){const{mdxAdmonitionTitle:n,rest:i}=function(e){const n=t.Children.toArray(e),i=n.find((e=>t.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),s=n.filter((e=>e!==i)),o=i?.props.children;return{mdxAdmonitionTitle:o,rest:s.length>0?(0,r.jsx)(r.Fragment,{children:s}):null}}(e.children),s=e.title??n;return{...e,...s&&{title:s},children:i}}var o=i(4164),a=i(1312),l=i(7559);const c="admonition_xJq3",h="admonitionHeading_Gvgb",d="admonitionIcon_Rf37",u="admonitionContent_BuS1";function p({type:e,className:n,children:i}){return(0,r.jsx)("div",{className:(0,o.A)(l.G.common.admonition,l.G.common.admonitionType(e),c,n),children:i})}function g({icon:e,title:n}){return(0,r.jsxs)("div",{className:h,children:[(0,r.jsx)("span",{className:d,children:e}),n]})}function x({children:e}){return e?(0,r.jsx)("div",{className:u,children:e}):null}function m(e){const{type:n,icon:i,title:t,children:s,className:o}=e;return(0,r.jsxs)(p,{type:n,className:o,children:[t||i?(0,r.jsx)(g,{title:t,icon:i}):null,(0,r.jsx)(x,{children:s})]})}function f(e){return(0,r.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const j={icon:(0,r.jsx)(f,{}),title:(0,r.jsx)(a.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function v(e){return(0,r.jsx)(m,{...j,...e,className:(0,o.A)("alert alert--secondary",e.className),children:e.children})}function T(e){return(0,r.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const q={icon:(0,r.jsx)(T,{}),title:(0,r.jsx)(a.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function w(e){return(0,r.jsx)(m,{...q,...e,className:(0,o.A)("alert alert--success",e.className),children:e.children})}function y(e){return(0,r.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const b={icon:(0,r.jsx)(y,{}),title:(0,r.jsx)(a.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function k(e){return(0,r.jsx)(m,{...b,...e,className:(0,o.A)("alert alert--info",e.className),children:e.children})}function S(e){return(0,r.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const R={icon:(0,r.jsx)(S,{}),title:(0,r.jsx)(a.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function A(e){return(0,r.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const _={icon:(0,r.jsx)(A,{}),title:(0,r.jsx)(a.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const N={icon:(0,r.jsx)(S,{}),title:(0,r.jsx)(a.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const M={...{note:v,tip:w,info:k,warning:function(e){return(0,r.jsx)(m,{...R,...e,className:(0,o.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,r.jsx)(m,{..._,...e,className:(0,o.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,r.jsx)(v,{title:"secondary",...e}),important:e=>(0,r.jsx)(k,{title:"important",...e}),success:e=>(0,r.jsx)(w,{title:"success",...e}),caution:function(e){return(0,r.jsx)(m,{...N,...e,className:(0,o.A)("alert alert--warning",e.className),children:e.children})}}};function $(e){const n=s(e),i=(t=n.type,M[t]||(console.warn(`No admonition component found for admonition type "${t}". Using Info as fallback.`),M.info));var t;return(0,r.jsx)(i,{...n})}},1367:(e,n,i)=>{i.d(n,{A:()=>s});i(6540);var t=i(7293),r=i(4848);function s(){return(0,r.jsx)(t.A,{type:"warning",title:"\ud83d\udea7 Work in Progress",icon:"\u26a0\ufe0f",children:"This document is a work in progress. Content may change, and some sections may be incomplete."})}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);