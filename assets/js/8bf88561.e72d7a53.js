"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[565],{5623:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"principles/schema-design","title":"Schema Design Principles","description":"Validation philosophy, refinement patterns, and extensibility choices","source":"@site/docs/principles/schema-design.mdx","sourceDirName":"principles","slug":"/principles/schema-design","permalink":"/attack-data-model/docs/principles/schema-design","draft":false,"unlisted":false,"editUrl":"https://github.com/mitre-attack/attack-data-model/tree/main/docusaurus/docs/principles/schema-design.mdx","tags":[],"version":"current","lastUpdatedBy":"Jared Ondricek","lastUpdatedAt":1758571766000,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Versioning Philosophy","permalink":"/attack-data-model/docs/principles/versioning-philosophy"},"next":{"title":"Compatibility","permalink":"/attack-data-model/docs/principles/compatibility"}}');var s=i(4848),r=i(8453),a=i(1367);const c={},o="Schema Design Principles",l={},d=[{value:"Core Design Philosophy",id:"core-design-philosophy",level:2},{value:"Validation as Documentation",id:"validation-as-documentation",level:3},{value:"Type Inference Over Type Declaration",id:"type-inference-over-type-declaration",level:3},{value:"Schema Architecture Patterns",id:"schema-architecture-patterns",level:2},{value:"Hierarchical Schema Composition",id:"hierarchical-schema-composition",level:3},{value:"Refinement Pattern for Complex Validation",id:"refinement-pattern-for-complex-validation",level:3},{value:"Extensibility Architecture",id:"extensibility-architecture",level:2},{value:"The Refinement Challenge",id:"the-refinement-challenge",level:3},{value:"Custom Property Conventions",id:"custom-property-conventions",level:3},{value:"Validation Philosophy",id:"validation-philosophy",level:2},{value:"Strict vs Relaxed Modes",id:"strict-vs-relaxed-modes",level:3},{value:"Strict Mode Philosophy",id:"strict-mode-philosophy",level:4},{value:"Relaxed Mode Philosophy",id:"relaxed-mode-philosophy",level:4},{value:"Error Message Design",id:"error-message-design",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Schema Compilation Strategy",id:"schema-compilation-strategy",level:3},{value:"Memory vs Speed Tradeoffs",id:"memory-vs-speed-tradeoffs",level:3},{value:"Testing Strategy for Schemas",id:"testing-strategy-for-schemas",level:2},{value:"Positive and Negative Test Cases",id:"positive-and-negative-test-cases",level:3},{value:"Real-World Data Testing",id:"real-world-data-testing",level:3},{value:"Future Evolution Patterns",id:"future-evolution-patterns",level:2},{value:"Schema Versioning Strategy",id:"schema-versioning-strategy",level:3},{value:"Extension Point Evolution",id:"extension-point-evolution",level:3},{value:"Living with Schema Complexity",id:"living-with-schema-complexity",level:2},{value:"When Schemas Feel Too Complex",id:"when-schemas-feel-too-complex",level:3},{value:"Simplification Strategies",id:"simplification-strategies",level:3},{value:"The Schema Design Philosophy in Practice",id:"the-schema-design-philosophy-in-practice",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"schema-design-principles",children:"Schema Design Principles"})}),"\n",(0,s.jsx)(a.A,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Validation philosophy, refinement patterns, and extensibility choices"})}),"\n",(0,s.jsx)(n.p,{children:"The schema layer is the foundation that enables both runtime validation and compile-time type safety in the ATT&CK Data Model. The design of these schemas reflects careful consideration of competing concerns: STIX compliance, ATT&CK domain rules, TypeScript integration, extensibility, and performance. This explanation explores the principles that guide schema design decisions."}),"\n",(0,s.jsx)(n.h2,{id:"core-design-philosophy",children:"Core Design Philosophy"}),"\n",(0,s.jsx)(n.h3,{id:"validation-as-documentation",children:"Validation as Documentation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Principle"}),": Schemas serve as executable documentation of ATT&CK requirements."]}),"\n",(0,s.jsx)(n.p,{children:"Rather than maintaining separate documentation about data format requirements, the schemas encode these requirements directly. This ensures that documentation stays synchronized with implementation and provides immediate feedback when requirements change."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Schema encodes the requirement that techniques must have ATT&CK IDs\r\nconst techniqueSchema = z.object({\r\n    external_references: z.array(externalReferenceSchema).min(1)\r\n}).superRefine((data, ctx) => {\r\n    const firstRef = data.external_references[0];\r\n    if (firstRef.source_name !== 'mitre-attack' || !firstRef.external_id) {\r\n        ctx.addIssue({\r\n            code: z.ZodIssueCode.custom,\r\n            message: 'First external reference must contain ATT&CK ID'\r\n        });\r\n    }\r\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This approach means that anyone using the schemas automatically understands ATT&CK requirements through validation feedback, rather than needing to consult separate documentation."}),"\n",(0,s.jsx)(n.h3,{id:"type-inference-over-type-declaration",children:"Type Inference Over Type Declaration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Principle"}),": TypeScript types are inferred from schemas, not declared separately."]}),"\n",(0,s.jsx)(n.p,{children:"This prevents the common problem of types becoming out of sync with runtime validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Single source of truth - types inferred from schema\r\nconst techniqueSchema = z.object({\r\n    name: z.string(),\r\n    x_mitre_platforms: z.array(z.string()).optional()\r\n});\r\ntype Technique = z.infer<typeof techniqueSchema>;\r\n\r\n// \u274c Avoided - separate type declarations that can drift\r\ninterface Technique {\r\n    name: string;\r\n    x_mitre_platforms?: string[];\r\n}\r\nconst techniqueSchema = z.object(/* ... */);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Impossible for types to become inconsistent with validation"}),"\n",(0,s.jsx)(n.li,{children:"Schema changes automatically propagate to TypeScript types"}),"\n",(0,s.jsx)(n.li,{children:"Refactoring tools work across both validation and type layers"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Trade-offs"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"More complex TypeScript types that reflect schema structure"}),"\n",(0,s.jsx)(n.li,{children:'Limited ability to create "prettier" type declarations'}),"\n",(0,s.jsx)(n.li,{children:"Schema design is constrained by TypeScript type inference capabilities"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"schema-architecture-patterns",children:"Schema Architecture Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"hierarchical-schema-composition",children:"Hierarchical Schema Composition"}),"\n",(0,s.jsx)(n.p,{children:"ATT&CK schemas are built through composition rather than inheritance, reflecting the layered nature of STIX + ATT&CK requirements:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Base STIX requirements\r\nconst stixDomainObjectSchema = z.object({\r\n    type: z.string(),\r\n    spec_version: z.literal('2.1'),\r\n    id: stixIdentifierSchema,\r\n    created: stixTimestampSchema,\r\n    modified: stixTimestampSchema\r\n});\r\n\r\n// ATT&CK-specific additions\r\nconst attackBaseObjectSchema = z.object({\r\n    name: z.string().min(1),\r\n    description: z.string().min(1),\r\n    x_mitre_attack_spec_version: z.string(),\r\n    x_mitre_version: z.string(),\r\n    x_mitre_domains: z.array(z.enum(['enterprise-attack', 'mobile-attack', 'ics-attack'])),\r\n    external_references: z.array(externalReferenceSchema).min(1)\r\n});\r\n\r\n// Object-specific requirements\r\nconst techniqueSchema = stixDomainObjectSchema\r\n    .merge(attackBaseObjectSchema)\r\n    .extend({\r\n        type: z.literal('attack-pattern'),\r\n        kill_chain_phases: z.array(killChainPhaseSchema),\r\n        x_mitre_platforms: z.array(z.string()).optional(),\r\n        x_mitre_is_subtechnique: z.boolean().optional()\r\n    });\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Design Rationale"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Composition over inheritance"})," enables flexible schema reuse"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Layer separation"})," makes it clear which requirements come from which standards"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Merge vs extend"})," choice depends on whether properties can conflict"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"refinement-pattern-for-complex-validation",children:"Refinement Pattern for Complex Validation"}),"\n",(0,s.jsx)(n.p,{children:"Simple property validation isn't sufficient for ATT&CK's business rules. The refinement pattern handles cross-property and contextual validation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const techniqueWithRefinements = techniqueSchema\r\n    .superRefine(createAttackIdRefinement())\r\n    .superRefine(createTacticRefinement())\r\n    .superRefine(createSubtechniqueRefinement());\r\n\r\n// Refinements are factory functions for reusability\r\nfunction createAttackIdRefinement() {\r\n    return (data: any, ctx: z.RefinementCtx) => {\r\n        const firstRef = data.external_references?.[0];\r\n        if (!firstRef || firstRef.source_name !== 'mitre-attack') {\r\n            ctx.addIssue({\r\n                code: z.ZodIssueCode.custom,\r\n                message: 'First external reference must be ATT&CK ID',\r\n                path: ['external_references', 0]\r\n            });\r\n        }\r\n\r\n        // Validate ATT&CK ID format\r\n        const attackId = firstRef.external_id;\r\n        if (attackId && !isValidAttackId(attackId, data.type)) {\r\n            ctx.addIssue({\r\n                code: z.ZodIssueCode.custom,\r\n                message: `Invalid ATT&CK ID format: ${attackId}`,\r\n                path: ['external_references', 0, 'external_id']\r\n            });\r\n        }\r\n    };\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Why Factory Functions"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reusability"})," across multiple schemas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testability"})," in isolation from schemas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Composability"})," - refinements can be mixed and matched"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensibility"})," - users can add their own refinements"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"extensibility-architecture",children:"Extensibility Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"the-refinement-challenge",children:"The Refinement Challenge"}),"\n",(0,s.jsxs)(n.p,{children:["Zod's extension methods (",(0,s.jsx)(n.code,{children:"extend"}),", ",(0,s.jsx)(n.code,{children:"merge"}),", ",(0,s.jsx)(n.code,{children:"pick"}),", ",(0,s.jsx)(n.code,{children:"omit"}),") discard refinements, creating a challenge for extensibility:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u274c This loses refinements\r\nconst extendedTechnique = techniqueSchema.extend({\r\n    x_custom_field: z.string()\r\n});\r\n\r\n// \u2705 This preserves refinements\r\nconst extendedTechnique = techniqueSchema\r\n    .extend({ x_custom_field: z.string() })\r\n    .superRefine(createAttackIdRefinement())  // Must reapply manually\r\n    .superRefine(createTacticRefinement());\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Design Response"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Export refinement factories"})," so users can reapply them"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Document which refinements"})," each schema uses"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provide extension helpers"})," that automate refinement reapplication"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Helper function for common extension pattern\r\nexport function extendAttackSchema<T extends z.ZodRawShape, U>(\r\n    baseSchema: z.ZodObject<T>,\r\n    extensions: U,\r\n    refinements: Array<(data: any, ctx: z.RefinementCtx) => void>\r\n) {\r\n    let extended = baseSchema.extend(extensions);\r\n    for (const refinement of refinements) {\r\n        extended = extended.superRefine(refinement);\r\n    }\r\n    return extended;\r\n}\r\n\r\n// Usage\r\nconst customTechnique = extendAttackSchema(\r\n    techniqueSchema,\r\n    { x_org_threat_level: z.enum(['low', 'medium', 'high']) },\r\n    [createAttackIdRefinement(), createTacticRefinement()]\r\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-property-conventions",children:"Custom Property Conventions"}),"\n",(0,s.jsx)(n.p,{children:"STIX custom property naming conventions are enforced through schema design:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Custom properties must use x_ prefix\r\nconst customPropertySchema = z.record(\r\n    z.string().regex(/^x_[a-z0-9_]+$/),  // Enforce naming convention\r\n    z.unknown()                          // Allow any value type\r\n);\r\n\r\nconst extensibleObjectSchema = baseSchema.and(customPropertySchema);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Standards compliance"})," is automatically enforced"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Namespace conflicts"})," are prevented"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tool interoperability"})," is preserved"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Limitations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Naming restrictions"})," may feel constraining"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TypeScript integration"})," is more complex with dynamic properties"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Validation messages"})," may be unclear for naming violations"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"validation-philosophy",children:"Validation Philosophy"}),"\n",(0,s.jsx)(n.h3,{id:"strict-vs-relaxed-modes",children:"Strict vs Relaxed Modes"}),"\n",(0,s.jsx)(n.p,{children:"The schema design supports two validation philosophies through parsing modes:"}),"\n",(0,s.jsx)(n.h4,{id:"strict-mode-philosophy",children:"Strict Mode Philosophy"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Data integrity is paramount - invalid data must be rejected completely"'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Strict mode - all objects must validate\r\nconst result = techniqueSchema.parse(data);  // Throws on any error\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Production applications requiring data quality guarantees"}),"\n",(0,s.jsx)(n.li,{children:"Integration with systems that can't handle partial data"}),"\n",(0,s.jsx)(n.li,{children:"Testing and validation scenarios"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"relaxed-mode-philosophy",children:"Relaxed Mode Philosophy"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:'"Partial data is better than no data - log errors but continue processing"'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Relaxed mode - continue with valid objects\r\nconst result = techniqueSchema.safeParse(data);\r\nif (!result.success) {\r\n    console.warn('Validation warnings:', result.error.errors);\r\n    return null;  // Skip invalid objects but continue processing\r\n}\r\nreturn result.data;\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Research and development environments"}),"\n",(0,s.jsx)(n.li,{children:"Integration with data sources that may have minor quality issues"}),"\n",(0,s.jsx)(n.li,{children:"Gradual data migration scenarios"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"error-message-design",children:"Error Message Design"}),"\n",(0,s.jsx)(n.p,{children:"Schema error messages are designed for developer clarity rather than end-user consumption:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good error message design\r\nctx.addIssue({\r\n    code: z.ZodIssueCode.custom,\r\n    message: 'Technique must specify at least one platform in x_mitre_platforms',\r\n    path: ['x_mitre_platforms']\r\n});\r\n\r\n// Poor error message design\r\nctx.addIssue({\r\n    code: z.ZodIssueCode.custom,\r\n    message: 'Invalid',  // Too vague\r\n    path: []             // No specific location\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Design principles"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Specific location"})," - use path arrays to pinpoint issues"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Actionable guidance"})," - explain what needs to be fixed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Context awareness"})," - reference ATT&CK concepts, not just schema structure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Technical accuracy"})," - precise terminology for developers"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"schema-compilation-strategy",children:"Schema Compilation Strategy"}),"\n",(0,s.jsx)(n.p,{children:"Schemas are designed to compile once and reuse many times:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Compile schema once\r\nconst compiledSchema = techniqueSchema;\r\n\r\n// \u2705 Reuse for multiple validations\r\ndata.forEach(item => compiledSchema.parse(item));\r\n\r\n// \u274c Don't recompile schemas\r\ndata.forEach(item => z.object({/* ... */}).parse(item));\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optimization strategies"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schema caching"})," to avoid recompilation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partial compilation"})," for frequently-used sub-schemas"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lazy loading"})," for rarely-used validation rules"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"memory-vs-speed-tradeoffs",children:"Memory vs Speed Tradeoffs"}),"\n",(0,s.jsx)(n.p,{children:"Schema design balances memory usage against validation speed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Memory-efficient but slower - shared schema instances\r\nconst baseSchema = z.object({/* large schema */});\r\nconst schema1 = baseSchema.extend({/* additions */});\r\nconst schema2 = baseSchema.extend({/* different additions */});\r\n\r\n// Faster but memory-intensive - separate compiled schemas\r\nconst schema1 = z.object({/* complete schema */});\r\nconst schema2 = z.object({/* complete schema with duplicated parts */});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The library chooses ",(0,s.jsx)(n.strong,{children:"memory efficiency over raw speed"})," because:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"ATT&CK datasets are large but validation happens infrequently"}),"\n",(0,s.jsx)(n.li,{children:"Schema compilation time is amortized across many validations"}),"\n",(0,s.jsx)(n.li,{children:"Memory usage affects application scalability more than validation speed"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"testing-strategy-for-schemas",children:"Testing Strategy for Schemas"}),"\n",(0,s.jsx)(n.h3,{id:"positive-and-negative-test-cases",children:"Positive and Negative Test Cases"}),"\n",(0,s.jsx)(n.p,{children:"Each schema includes comprehensive test coverage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"describe('techniqueSchema', () => {\r\n    it('accepts valid technique objects', () => {\r\n        const validTechnique = {\r\n            type: 'attack-pattern',\r\n            id: 'attack-pattern--12345678-1234-1234-1234-123456789012',\r\n            spec_version: '2.1',\r\n            created: '2023-01-01T00:00:00.000Z',\r\n            modified: '2023-01-01T00:00:00.000Z',\r\n            name: 'Process Injection',\r\n            description: 'Adversaries may inject code...',\r\n            external_references: [{\r\n                source_name: 'mitre-attack',\r\n                external_id: 'T1055',\r\n                url: 'https://attack.mitre.org/techniques/T1055'\r\n            }],\r\n            x_mitre_attack_spec_version: '3.3.0',\r\n            x_mitre_version: '1.0'\r\n        };\r\n\r\n        expect(() => techniqueSchema.parse(validTechnique)).not.toThrow();\r\n    });\r\n\r\n    it('rejects techniques without ATT&CK IDs', () => {\r\n        const invalidTechnique = {\r\n            // Valid STIX structure but missing ATT&CK ID\r\n            type: 'attack-pattern',\r\n            id: 'attack-pattern--12345678-1234-1234-1234-123456789012',\r\n            // ... other required fields\r\n            external_references: [{\r\n                source_name: 'other-source',  // Not mitre-attack\r\n                external_id: 'OTHER-001'\r\n            }]\r\n        };\r\n\r\n        expect(() => techniqueSchema.parse(invalidTechnique)).toThrow();\r\n    });\r\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"real-world-data-testing",children:"Real-World Data Testing"}),"\n",(0,s.jsx)(n.p,{children:"Schemas are tested against actual ATT&CK releases:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Test against production ATT&CK data\r\ndescribe('schema compatibility', () => {\r\n    it('validates current ATT&CK enterprise data', async () => {\r\n        const enterpriseData = await loadAttackData('enterprise-attack', '15.1');\r\n\r\n        enterpriseData.objects.forEach(obj => {\r\n            if (obj.type === 'attack-pattern') {\r\n                expect(() => techniqueSchema.parse(obj)).not.toThrow();\r\n            }\r\n        });\r\n    });\r\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This ensures schemas remain compatible with real ATT&CK data evolution."}),"\n",(0,s.jsx)(n.h2,{id:"future-evolution-patterns",children:"Future Evolution Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"schema-versioning-strategy",children:"Schema Versioning Strategy"}),"\n",(0,s.jsx)(n.p,{children:"Schemas evolve alongside ATT&CK specifications:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Version-aware schema selection\r\nconst getSchemaForVersion = (attackVersion: string) => {\r\n    if (attackVersion >= '3.3.0') {\r\n        return techniqueSchemaV3_3;\r\n    } else if (attackVersion >= '3.0.0') {\r\n        return techniqueSchemaV3_0;\r\n    } else {\r\n        return legacyTechniqueSchema;\r\n    }\r\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Migration strategy"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backward compatibility"})," for older ATT&CK versions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gradual deprecation"})," of obsolete schema features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clear migration paths"})," between schema versions"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"extension-point-evolution",children:"Extension Point Evolution"}),"\n",(0,s.jsx)(n.p,{children:"Schema extension mechanisms evolve to support new use cases:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Current extension pattern\r\nconst extended = baseSchema.extend(customFields).superRefine(customRefinement);\r\n\r\n// Future extension pattern (conceptual)\r\nconst extended = baseSchema.withExtensions({\r\n    fields: customFields,\r\n    refinements: [customRefinement],\r\n    metadata: { version: '2.0', namespace: 'org' }\r\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"living-with-schema-complexity",children:"Living with Schema Complexity"}),"\n",(0,s.jsx)(n.h3,{id:"when-schemas-feel-too-complex",children:"When Schemas Feel Too Complex"}),"\n",(0,s.jsxs)(n.p,{children:["The ATT&CK Data Model schemas can feel overwhelming because they encode the full complexity of STIX + ATT&CK requirements. This complexity is ",(0,s.jsx)(n.strong,{children:"intentional and necessary"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"STIX compliance"})," requires numerous fields and validation rules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ATT&CK domain rules"})," add additional constraints beyond STIX"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type safety"})," demands precise specification of all possibilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extensibility"})," needs mechanisms that maintain standards compliance"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"simplification-strategies",children:"Simplification Strategies"}),"\n",(0,s.jsx)(n.p,{children:"When working with the schemas feels too complex, consider:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use higher-level APIs"})," - Implementation classes abstract schema complexity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Focus on your use case"})," - You don't need to understand all schema features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Start simple"})," - Begin with basic objects and add complexity gradually"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Leverage validation feedback"})," - Let schema errors guide you to correct usage"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"the-schema-design-philosophy-in-practice",children:"The Schema Design Philosophy in Practice"}),"\n",(0,s.jsx)(n.p,{children:"The schema design reflects a philosophical commitment to:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Correctness over convenience"})," - Better to be precise than easy"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Standards compliance over optimization"})," - STIX compatibility is non-negotiable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type safety over flexibility"})," - Catch errors at compile time when possible"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation through code"})," - Schemas serve as executable specifications"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Future-proofing over current simplicity"})," - Design for evolution and extension"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Understanding these philosophical commitments helps you work effectively with the schema layer and contribute to its continued development."}),"\n",(0,s.jsx)(n.hr,{})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},7293:(e,n,i)=>{i.d(n,{A:()=>I});var t=i(6540),s=i(4848);function r(e){const{mdxAdmonitionTitle:n,rest:i}=function(e){const n=t.Children.toArray(e),i=n.find((e=>t.isValidElement(e)&&"mdxAdmonitionTitle"===e.type)),r=n.filter((e=>e!==i)),a=i?.props.children;return{mdxAdmonitionTitle:a,rest:r.length>0?(0,s.jsx)(s.Fragment,{children:r}):null}}(e.children),r=e.title??n;return{...e,...r&&{title:r},children:i}}var a=i(4164),c=i(1312),o=i(7559);const l="admonition_xJq3",d="admonitionHeading_Gvgb",h="admonitionIcon_Rf37",m="admonitionContent_BuS1";function p({type:e,className:n,children:i}){return(0,s.jsx)("div",{className:(0,a.A)(o.G.common.admonition,o.G.common.admonitionType(e),l,n),children:i})}function u({icon:e,title:n}){return(0,s.jsxs)("div",{className:d,children:[(0,s.jsx)("span",{className:h,children:e}),n]})}function x({children:e}){return e?(0,s.jsx)("div",{className:m,children:e}):null}function j(e){const{type:n,icon:i,title:t,children:r,className:a}=e;return(0,s.jsxs)(p,{type:n,className:a,children:[t||i?(0,s.jsx)(u,{title:t,icon:i}):null,(0,s.jsx)(x,{children:r})]})}function g(e){return(0,s.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,s.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const f={icon:(0,s.jsx)(g,{}),title:(0,s.jsx)(c.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function y(e){return(0,s.jsx)(j,{...f,...e,className:(0,a.A)("alert alert--secondary",e.className),children:e.children})}function v(e){return(0,s.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,s.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const T={icon:(0,s.jsx)(v,{}),title:(0,s.jsx)(c.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function b(e){return(0,s.jsx)(j,{...T,...e,className:(0,a.A)("alert alert--success",e.className),children:e.children})}function S(e){return(0,s.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,s.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const C={icon:(0,s.jsx)(S,{}),title:(0,s.jsx)(c.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function w(e){return(0,s.jsx)(j,{...C,...e,className:(0,a.A)("alert alert--info",e.className),children:e.children})}function A(e){return(0,s.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,s.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const z={icon:(0,s.jsx)(A,{}),title:(0,s.jsx)(c.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function _(e){return(0,s.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,s.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const k={icon:(0,s.jsx)(_,{}),title:(0,s.jsx)(c.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const R={icon:(0,s.jsx)(A,{}),title:(0,s.jsx)(c.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const q={...{note:y,tip:b,info:w,warning:function(e){return(0,s.jsx)(j,{...z,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,s.jsx)(j,{...k,...e,className:(0,a.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,s.jsx)(y,{title:"secondary",...e}),important:e=>(0,s.jsx)(w,{title:"important",...e}),success:e=>(0,s.jsx)(b,{title:"success",...e}),caution:function(e){return(0,s.jsx)(j,{...R,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})}}};function I(e){const n=r(e),i=(t=n.type,q[t]||(console.warn(`No admonition component found for admonition type "${t}". Using Info as fallback.`),q.info));var t;return(0,s.jsx)(i,{...n})}},1367:(e,n,i)=>{i.d(n,{A:()=>r});i(6540);var t=i(7293),s=i(4848);function r(){return(0,s.jsx)(t.A,{type:"warning",title:"\ud83d\udea7 Work in Progress",icon:"\u26a0\ufe0f",children:"This document is a work in progress. Content may change, and some sections may be incomplete."})}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(6540);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);