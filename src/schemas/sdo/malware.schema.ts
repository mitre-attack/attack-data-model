import { z } from 'zod/v4';
import {
  createFirstAliasRefinement,
  createFirstXMitreAliasRefinement,
} from '../../refinements/index.js';
import {
  createAttackExternalReferencesSchema,
  createOldMitreAttackIdSchema,
  createStixIdValidator,
  createStixTypeValidator,
  ImplementationLanguageOV,
  killChainPhaseSchema,
  MalwareCapabilityOV,
  MalwareTypeOV,
  ProcessorArchitectureOV,
  stixListOfString,
  stixTimestampSchema,
} from '../common/property-schemas/index.js';
import { softwareSchema } from './software.schema.js';

//==============================================================================
//
// file and artifact type for sample_refs
//
//==============================================================================

export const stixFileType = createStixIdValidator('file').meta({
  description: 'Used to specify the file stixType of the sample_refs property.',
});

export const stixArtifactType = createStixIdValidator('artifact').meta({
  description: 'Used to specify the artifact stixType of the sample_refs property.',
});

//==============================================================================
//
// Malware Schema
//
//==============================================================================

export const malwareSchema = softwareSchema
  .extend({
    id: createStixIdValidator('malware'),

    type: createStixTypeValidator('malware'),

    is_family: z.boolean().meta({
      description:
        'Whether the object represents a malware family (if true) or a malware instance (if false)',
    }),

    // Not used in ATT&CK Malware but defined in STIX
    malware_types: z
      .array(MalwareTypeOV)
      .min(1)
      .meta({ description: 'A set of categorizations for the malware being described.' })
      .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    kill_chain_phases: z
      .array(killChainPhaseSchema)
      .min(1)
      .meta({ description: 'The list of Kill Chain Phases for which this malware can be used.' })
      .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    first_seen: stixTimestampSchema.optional().meta({
      description: 'The time that this malware instance or malware family was first seen.',
    }),

    // Not used in ATT&CK Malware but defined in STIX
    last_seen: stixTimestampSchema.optional().meta({
      description: 'The time that this malware family or malware instance was last seen.',
    }),

    external_references: createAttackExternalReferencesSchema('malware'),

    x_mitre_old_attack_id: createOldMitreAttackIdSchema('malware').optional(),

    // Not used in ATT&CK Malware but defined in STIX
    os_execution_envs: stixListOfString
      .meta({
        description:
          'The operating systems that the malware family or malware instance is executable on. This applies to virtualized operating systems as well as those running on bare metal.',
      })
      .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    architecture_execution_envs: z
      .array(ProcessorArchitectureOV)
      .min(1)
      .meta({
        description:
          'The processor architectures (e.g., x86, ARM, etc.) that the malware instance or family is executable on.',
      })
      .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    implementation_languages: z
      .array(ImplementationLanguageOV)
      .min(1)
      .meta({
        description:
          'The programming language(s) used to implement the malware instance or family.',
      })
      .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    capabilities: z
      .array(MalwareCapabilityOV)
      .min(1)
      .meta({
        description: 'Any of the capabilities identified for the malware instance or family.',
      })
      .optional(),

    // Not used in ATT&CK Malware but defined in STIX
    sample_refs: z
      .array(z.union([stixArtifactType, stixFileType]))
      .min(1)
      .optional()
      .meta({
        description:
          'The sample_refs property specifies a list of identifiers of the SCO file or artifact objects associated with this malware instance(s) or family.',
      }),
  })
  .strict()
  .check((ctx) => {
    createFirstAliasRefinement()(ctx);
    createFirstXMitreAliasRefinement()(ctx);
  });

export type Malware = z.infer<typeof malwareSchema>;
